"""
Animation with the Savitzky-Golay filter applied to a trajectory. Function generated by ChatGPT.
"""
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.signal import savgol_filter
from matplotlib.animation import FuncAnimation

plot_lines = True

if plot_lines :

    # ------------------------
    # Generate noisy data
    # ------------------------
    np.random.seed(42)
    x = np.linspace(0, 10, 100)
    y_true = np.sin(x)
    y_noisy = y_true + np.random.normal(0, 0.2, size=x.size)

    # Savitzky-Golay parameters
    window_length = 11  # must be odd
    polyorder = 2

    # Precompute the full smoothed data for reference
    y_smooth_full = savgol_filter(y_noisy, window_length=window_length, polyorder=polyorder)

    # ------------------------
    # Set up figure and axes
    # ------------------------
    sns.set_style("darkgrid")
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8), sharex=True)

    # Top: noisy data + window highlight
    line_noisy, = ax1.plot(x, y_noisy, label="Noisy data", color="gray")
    highlight, = ax1.plot([], [], 'o', color="red", label="SG window")

    ax1.set_title("Noisy data with Savitzky-Golay window")
    ax1.legend()

    # Bottom: progressively smoothed data
    line_smooth, = ax2.plot([], [], label="Smoothed data", color="blue")
    ax2.set_xlim(x.min(), x.max())
    ax2.set_ylim(y_noisy.min() - 0.5, y_noisy.max() + 0.5)
    ax2.set_title("Progressively smoothed data")
    ax2.legend()

    # ------------------------
    # Animation function
    # ------------------------
    def init():
        highlight.set_data([], [])
        line_smooth.set_data([], [])
        return highlight, line_smooth

    def animate(i):
        # Current window center index
        if i < window_length // 2 or i > len(x) - window_length // 2 - 1:
            # If the window doesn't fully fit, skip drawing smoothed value
            highlight.set_data([], [])
            line_smooth.set_data(x[:i], y_smooth_full[:i])
        else:
            window_indices = np.arange(i - window_length // 2, i + window_length // 2 + 1)
            highlight.set_data(x[window_indices], y_noisy[window_indices])
            line_smooth.set_data(x[:i+1], y_smooth_full[:i+1])
        return highlight, line_smooth

    # ------------------------
    # Run animation
    # ------------------------
    ani = FuncAnimation(
        fig, animate, frames=len(x),
        init_func=init, blit=True, interval=50, repeat=False
    )

    plt.tight_layout()

else :
    # ------------------------
    # Generate noisy data
    # ------------------------
    np.random.seed(42)
    x = np.linspace(0, 10, 100)
    y_true = np.sin(x)
    y_noisy = y_true + np.random.normal(0, 0.2, size=x.size)

    # Savitzky-Golay parameters
    window_length = 11  # must be odd
    polyorder = 2

    # Precompute the full smoothed data for reference
    y_smooth_full = savgol_filter(y_noisy, window_length=window_length, polyorder=polyorder)

    # ------------------------
    # Set up figure and axes
    # ------------------------
    sns.set_style("darkgrid")
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 8), sharex=True)

    # Top: noisy data (scatter) + window highlight
    scatter_noisy = ax1.scatter(x, y_noisy, label="Noisy data", color="gray", s=20)
    highlight, = ax1.plot([], [], 'o', color="red", label="SG window")

    ax1.set_title("Noisy data with Savitzky-Golay window")
    ax1.legend()

    # Bottom: progressively smoothed data (scatter)
    scatter_smooth = ax2.scatter([], [], label="Smoothed data", color="blue", s=20)
    ax2.set_xlim(x.min(), x.max())
    ax2.set_ylim(y_noisy.min() - 0.5, y_noisy.max() + 0.5)
    ax2.set_title("Progressively smoothed data")
    ax2.legend()

    # ------------------------
    # Animation function
    # ------------------------
    def init():
        highlight.set_data([], [])
        #scatter_smooth.set_offsets([])
        scatter_smooth.set_offsets(np.empty((0, 2)))
        return highlight, scatter_smooth

    def animate(i):
        if i < window_length // 2 or i > len(x) - window_length // 2 - 1:
            highlight.set_data([], [])
        else:
            window_indices = np.arange(i - window_length // 2, i + window_length // 2 + 1)
            highlight.set_data(x[window_indices], y_noisy[window_indices])
        
        # Update smooth scatter points
        points_so_far = np.column_stack([x[:i+1], y_smooth_full[:i+1]])
        scatter_smooth.set_offsets(points_so_far)
        
        return highlight, scatter_smooth

    # ------------------------
    # Run animation
    # ------------------------
    ani = FuncAnimation(
        fig, animate, frames=len(x),
        init_func=init, blit=True, interval=50, repeat=False
    )

    plt.tight_layout()

# in any case, save the animation as a GIF
ani.save('figures/savitsky_golay_animation.gif', writer='pillow', fps=15)
